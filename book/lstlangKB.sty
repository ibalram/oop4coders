%=========================================================================
% Language definition:
% ---------------------
% The default ones sometimes misses some keywords, so define my own
%=========================================================================

\ProvidesFile{lstlangKB.sty}
[2018/08/19 1.0 KodeBook listings language file]

\RequirePackage{listings}


\lstdefinelanguage[KB]{C++}
{
	keywords={
		class, private, public, protected, friend, new, struct, static,
		\#include, namespace, using, delete, 
		if, else, try, catch, const, return, throw,
		\#ifndef,\#define, \#endif, operator,
	},
	morekeywords=[2]{
		string, int, void, char, bool, ostream,  
		this, super, std, exception, 
	},
	morekeywords=[3]{
		atoi, cout, 
	},
	sensitive=true,
	morecomment=[l]{//},
	morecomment=[s]{/*}{*/},
	morestring=[b]",
	morestring=[b]',
	alsoletter={\#},
} 

\lstdefinelanguage[KB]{Java}
{
	keywords={
		class, private, public, protected, new, static, extends, implements,
		import, @Override, package,
		if, else, try, catch, final, return, throw, throws, 
	},
	morekeywords=[2]{
		String,int, void, boolean, Object, false, true, Integer, 
		this, super, null, System, 
		Cloneable, Comparable,
		CloneNotSupportedException, Exception, out, 
		IndexOutOfBoundsException, NumberFormatException, 
	},
	morekeywords=[3]{
		equals, getClass, compareTo, clone, hashCode, toString,
		getMessage, print, println, exit, parseInt, 
		finalize,
	},
	sensitive=true,
	morecomment=[l]{//},
	morecomment=[s]{/*}{*/},
	morestring=[b]",
} 

\lstdefinelanguage[KB]{Javascript}
{
	keywords={
		break, case, catch, continue, debugger, default, delete, do, 
		else, finally, for, function, if, in, instanceof, new,  
		return, switch, throw, try, typeof, var, while, with,
		class, throw, implements, require, static, let, extends, 
	},
	morekeywords=[2]{
		null, this, false, true, boolean, Object,
		prototype, super,
		console, process, module, Error,
	},
	morekeywords=[3]{
		constructor, toString, log, call, create,
		defineProperties, get, set, assign, 
	},
	sensitive=false,
	morecomment=[l]{//},
	morecomment=[s]{/*}{*/},
	morestring=[b]",
	morestring=[b]',
} 


\lstdefinelanguage[KB]{Lua}
{
	keywords={
		function, return, end, or, and, local, 
		require,
		if, then, else, elseif,
	},
	morekeywords=[2]{
		nil, os,
	},
	morekeywords=[3]{
		__eq,__lt, __le, tostring,
		error, pcall,
		setmetatable, __index, __newindex, 
		print, tonumber, __tostring, 
	},
	sensitive=false,
	morecomment=[l]{--},
%	morecomment=[s]{/*}{*/},
	morestring=[b]",
} 

\lstdefinelanguage[KB]{Perl}
{
	keywords={
		package, sub, my, use, our,
		if, else, unless,
		die, return, eval, 
		bless, overload,
	},
	morekeywords=[2]{
		shift, @_, @ISA,
		__PACKAGE__,
		caller,
		Scalar, Util,
		\$ARGV, SUPER,
	},
	morekeywords=[3]{
		eq, exists, print, isa,
		refaddr, defined, undef, DESTROY, qw,
	},
	sensitive=true,
	morecomment=[l]{\#},
	%	morecomment=[s]{/*}{*/},
	morestring=[b]",
	morestring=[b]',
} 

\lstdefinelanguage[KB]{PHP}
{
	keywords={
		class, private, public, protected, new, extends, implements,
		var, function, require_once, return, if, else, throw,  
		try, catch, switch, case, abstract, 
	},
	morekeywords=[2]{
		\$this, parent, \$argv,
		Exception, self, 
	},
	morekeywords=[3]{
		__construct, __toString, __clone, print, echo,
		__get, __set, sizeof, exit, __destruct, unset, 
		clone, 
	},
	sensitive=true,
	morecomment=[l]{//},
	morecomment=[s]{/*}{*/},
	morestring=[b]",
	morestring=[b]',
} 

\lstdefinelanguage[KB]{Python}
{
	keywords={
		class, def, return, try, except, as, 
		@staticmethod,@property, from, import,
		if, else, raise, setter, 
	},
	morekeywords=[2]{
		super,
		object,
		sys,
		__name__,
		Exception,
	},
	morekeywords=[3]{
		__init__, __str__, __copy__, __eq__, __lt__, __hash__, __del__,
		print, str, copy, hash, del, len, int, exit,
	},
	sensitive=true,
	morecomment=[l]{\#},
	morestring=[b]",
	morestring=[b]',
} 

\lstdefinelanguage[KB]{Ruby}
{
	keywords={
		class, def, end, if, else,
		include, case, when, raise, rescue, begin, ensure, module,
		END, BEGIN,
		attr_accessor, attr_reader, attr_writer, 
	},
	morekeywords=[2]{
		super, Comparable, ObjectSpace, 
		StandardError, nil, 
		__FILE__, \$0, ARGV, 
	},
	morekeywords=[3]{
		puts, initialize, finalize, 
		to_s, initialize_clone, new, clone, 
		protected, private, public, 
		print, exit, to_i, length, 
		define_finalizer, proc, hash, 
	},
	sensitive=true,
	morecomment=[l]{\#},
	morestring=[b]",
	morestring=[b]',
} 
